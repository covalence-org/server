// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: audit_queries.sql

package sqlc

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRequestFullTrace = `-- name: GetRequestFullTrace :many
SELECT rl.request_id, rl.user_id, rl.api_key_id, rl.model, rl.target_url, rl.inputs, rl.parameters, rl.received_at, rl.client_ip, rl.archived, res.response, res.latency_ms, pe.firewall_event_id, pe.request_id, pe.firewall_id, pe.firewall_type, pe.blocked, pe.blocked_reason, pe.risk_score, pe.evaluated_at
FROM request_logs rl
LEFT JOIN response_logs res ON rl.request_id = res.request_id
LEFT JOIN firewall_events pe ON rl.request_id = pe.request_id
WHERE rl.request_id = $1
`

type GetRequestFullTraceRow struct {
	RequestID       pgtype.UUID
	UserID          pgtype.UUID
	ApiKeyID        pgtype.UUID
	Model           string
	TargetUrl       string
	Inputs          [][]byte
	Parameters      []byte
	ReceivedAt      pgtype.Timestamptz
	ClientIp        *netip.Addr
	Archived        pgtype.Bool
	Response        []byte
	LatencyMs       pgtype.Int4
	FirewallEventID pgtype.UUID
	RequestID_2     pgtype.UUID
	FirewallID      pgtype.Text
	FirewallType    pgtype.Text
	Blocked         pgtype.Bool
	BlockedReason   pgtype.Text
	RiskScore       pgtype.Numeric
	EvaluatedAt     pgtype.Timestamptz
}

func (q *Queries) GetRequestFullTrace(ctx context.Context, requestID pgtype.UUID) ([]GetRequestFullTraceRow, error) {
	rows, err := q.db.Query(ctx, getRequestFullTrace, requestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRequestFullTraceRow
	for rows.Next() {
		var i GetRequestFullTraceRow
		if err := rows.Scan(
			&i.RequestID,
			&i.UserID,
			&i.ApiKeyID,
			&i.Model,
			&i.TargetUrl,
			&i.Inputs,
			&i.Parameters,
			&i.ReceivedAt,
			&i.ClientIp,
			&i.Archived,
			&i.Response,
			&i.LatencyMs,
			&i.FirewallEventID,
			&i.RequestID_2,
			&i.FirewallID,
			&i.FirewallType,
			&i.Blocked,
			&i.BlockedReason,
			&i.RiskScore,
			&i.EvaluatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnarchivedRequests = `-- name: GetUnarchivedRequests :many
SELECT request_id, user_id, api_key_id, model, target_url, inputs, parameters, received_at, client_ip, archived FROM request_logs
WHERE archived = FALSE
AND received_at < now() - interval '10 minutes'
`

func (q *Queries) GetUnarchivedRequests(ctx context.Context) ([]RequestLog, error) {
	rows, err := q.db.Query(ctx, getUnarchivedRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequestLog
	for rows.Next() {
		var i RequestLog
		if err := rows.Scan(
			&i.RequestID,
			&i.UserID,
			&i.ApiKeyID,
			&i.Model,
			&i.TargetUrl,
			&i.Inputs,
			&i.Parameters,
			&i.ReceivedAt,
			&i.ClientIp,
			&i.Archived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAuditArchive = `-- name: InsertAuditArchive :one
INSERT INTO audit_archives (
  request_id, s3_path, archive_hash
)
VALUES ($1, $2, $3)
RETURNING archive_id, request_id, s3_path, archived_at, archive_hash
`

type InsertAuditArchiveParams struct {
	RequestID   pgtype.UUID
	S3Path      string
	ArchiveHash pgtype.Text
}

func (q *Queries) InsertAuditArchive(ctx context.Context, arg InsertAuditArchiveParams) (AuditArchive, error) {
	row := q.db.QueryRow(ctx, insertAuditArchive, arg.RequestID, arg.S3Path, arg.ArchiveHash)
	var i AuditArchive
	err := row.Scan(
		&i.ArchiveID,
		&i.RequestID,
		&i.S3Path,
		&i.ArchivedAt,
		&i.ArchiveHash,
	)
	return i, err
}

const insertFirewallEvent = `-- name: InsertFirewallEvent :one
INSERT INTO firewall_events (
  request_id, firewall_id, firewall_type, blocked, blocked_reason, risk_score
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING firewall_event_id, request_id, firewall_id, firewall_type, blocked, blocked_reason, risk_score, evaluated_at
`

type InsertFirewallEventParams struct {
	RequestID     pgtype.UUID
	FirewallID    string
	FirewallType  string
	Blocked       pgtype.Bool
	BlockedReason pgtype.Text
	RiskScore     pgtype.Numeric
}

func (q *Queries) InsertFirewallEvent(ctx context.Context, arg InsertFirewallEventParams) (FirewallEvent, error) {
	row := q.db.QueryRow(ctx, insertFirewallEvent,
		arg.RequestID,
		arg.FirewallID,
		arg.FirewallType,
		arg.Blocked,
		arg.BlockedReason,
		arg.RiskScore,
	)
	var i FirewallEvent
	err := row.Scan(
		&i.FirewallEventID,
		&i.RequestID,
		&i.FirewallID,
		&i.FirewallType,
		&i.Blocked,
		&i.BlockedReason,
		&i.RiskScore,
		&i.EvaluatedAt,
	)
	return i, err
}

const insertRequestLog = `-- name: InsertRequestLog :one
INSERT INTO request_logs (
  user_id, api_key_id, model, target_url, inputs, parameters, client_ip
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING request_id, user_id, api_key_id, model, target_url, inputs, parameters, received_at, client_ip, archived
`

type InsertRequestLogParams struct {
	UserID     pgtype.UUID
	ApiKeyID   pgtype.UUID
	Model      string
	TargetUrl  string
	Inputs     [][]byte
	Parameters []byte
	ClientIp   *netip.Addr
}

func (q *Queries) InsertRequestLog(ctx context.Context, arg InsertRequestLogParams) (RequestLog, error) {
	row := q.db.QueryRow(ctx, insertRequestLog,
		arg.UserID,
		arg.ApiKeyID,
		arg.Model,
		arg.TargetUrl,
		arg.Inputs,
		arg.Parameters,
		arg.ClientIp,
	)
	var i RequestLog
	err := row.Scan(
		&i.RequestID,
		&i.UserID,
		&i.ApiKeyID,
		&i.Model,
		&i.TargetUrl,
		&i.Inputs,
		&i.Parameters,
		&i.ReceivedAt,
		&i.ClientIp,
		&i.Archived,
	)
	return i, err
}

const insertResponseLog = `-- name: InsertResponseLog :one
INSERT INTO response_logs (
  request_id, response, latency_ms
)
VALUES ($1, $2, $3)
RETURNING response_id, request_id, response, created_at, latency_ms
`

type InsertResponseLogParams struct {
	RequestID pgtype.UUID
	Response  []byte
	LatencyMs pgtype.Int4
}

func (q *Queries) InsertResponseLog(ctx context.Context, arg InsertResponseLogParams) (ResponseLog, error) {
	row := q.db.QueryRow(ctx, insertResponseLog, arg.RequestID, arg.Response, arg.LatencyMs)
	var i ResponseLog
	err := row.Scan(
		&i.ResponseID,
		&i.RequestID,
		&i.Response,
		&i.CreatedAt,
		&i.LatencyMs,
	)
	return i, err
}

const markRequestArchived = `-- name: MarkRequestArchived :exec
UPDATE request_logs
SET archived = TRUE
WHERE request_id = $1
`

func (q *Queries) MarkRequestArchived(ctx context.Context, requestID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markRequestArchived, requestID)
	return err
}
